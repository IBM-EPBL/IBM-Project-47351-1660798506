# -*- coding: utf-8 -*-
"""LOGESH S_ASSIGNMENT_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NesbsUtj1c4OMw3NvcL-GE5eX4gy8CsK

**ASSIGNMENT** **4**

Project         :  Visualizing and Predicting Heart Diseases with an Interactive Dash Board

NAME : LOGESH **S**

Dataset link : https://drive.google.com/file/d/1sIv-7x7CE0zAPAt0Uv-6pbO2ST2LVp5u/view

**Loading the Dataset**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import files
upload=files.upload()
df = pd.read_csv('abalone.csv')

df.describe()

df.head()

"""**Perform visualisations**

**Univariate analysis**
"""

sns.boxplot(df.Length)

sns.countplot(x = 'Sex', data = df, palette = 'Set3')

sns.heatmap(df.isnull())

"""
**Bivariate analysis**"""

sns.barplot(x=df.Height,y=df.Diameter)

numerical_features = df.select_dtypes(include = [np.number]).columns
categorical_features = df.select_dtypes(include = [np.object]).columns

plt.figure(figsize = (20,7))
sns.heatmap(df[numerical_features].corr(),annot = True)

"""**Multivariate Analysis**"""

sns.pairplot(df)

"""**Perform descriptive model on the dataset**"""

df['Height'].describe()

df['Height'].mean()

df.max()

df['Sex'].value_counts()

df[df.Height == 0]

df['Shucked weight'].kurtosis()

df['Diameter'].median()

df['Shucked weight'].skew()

"""**Missing values**"""

df.isna().any()

missing_values = df.isnull().sum().sort_values(ascending = False)
percentage_missing_values = (missing_values/len(df))*100
pd.concat([missing_values, percentage_missing_values], axis = 1, keys= ['Missing values', '% Missing'])

"""**Find the outliers**"""

q1=df.Rings.quantile(0.25)
q2=df.Rings.quantile(0.75)
iqr=q2-q1
print(iqr)

df = pd.get_dummies(df)
dummy_df = df
df.boxplot( rot = 90, figsize=(20,5))

df['age'] = df['Rings']
df = df.drop('Rings', axis = 1)

df.drop(df[(df['Viscera weight']> 0.5) & (df['age'] < 20)].index, inplace=True)
df.drop(df[(df['Viscera weight']<0.5) & (df['age'] > 25)].index, inplace=True)

var = 'Shell weight'
plt.scatter(x = df[var], y = df['age'])
plt.grid(True)

"""**Check for categorical columns and perform encoding**"""

numerical_features = df.select_dtypes(include = [np.number]).columns
categorical_features = df.select_dtypes(include = [np.object]).columns

numerical_features
categorical_features

abalone_numeric = df[['Length', 'Diameter', 'Height', 'Whole weight', 'Shucked weight','Viscera weight', 'Shell weight', 'age', 'Sex_F', 'Sex_I', 'Sex_M']]
abalone_numeric.head()

"""**Dependent and Independent Variables**"""

x = df.iloc[:, 0:1].values
y = df.iloc[:, 1]
y

"""**Scaling the Independent Variables**"""

print ("\n ORIGINAL VALUES: \n\n", x,y)

from sklearn import preprocessing
min_max_scaler = preprocessing.MinMaxScaler(feature_range =(0, 1)) 
new_y= min_max_scaler.fit_transform(x,y) 
print ("\n VALUES AFTER MIN MAX SCALING: \n\n", new_y)

"""**Split the data into Training and Testing**"""

X = df.drop('age', axis = 1)
y = df['age']

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.feature_selection import SelectKBest
standardScale = StandardScaler()
standardScale.fit_transform(X)

selectkBest = SelectKBest()
X_new = selectkBest.fit_transform(X, y)

X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size = 0.25)
X_train

y_train

"""**Build the model**

**Linear Regression**
"""

from sklearn import linear_model as lm
from sklearn.linear_model import LinearRegression
model=lm.LinearRegression()
results=model.fit(X_train,y_train)
accuracy = model.score(X_train, y_train)
print('Accuracy of the model:', accuracy)

"""**Training the model**"""

lm = LinearRegression()
lm.fit(X_train, y_train)
y_train_pred = lm.predict(X_train)
y_train_pred

X_train

y_train

from sklearn.metrics import mean_absolute_error, mean_squared_error
s = mean_squared_error(y_train, y_train_pred)
print('Mean Squared error of training set :%2f'%s)

"""**Testing the model**"""

y_train_pred = lm.predict(X_train)
y_test_pred = lm.predict(X_test)
y_test_pred

X_test

y_test

p = mean_squared_error(y_test, y_test_pred)
print('Mean Squared error of testing set :%2f'%p)

"""**Measure the performance using metrices**"""

from sklearn.metrics import r2_score
s = r2_score(y_train, y_train_pred)
print('R2 Score of training set:%.2f'%s)

from sklearn.metrics import r2_score
p = r2_score(y_test, y_test_pred)
print('R2 Score of testing set:%.2f'%p)